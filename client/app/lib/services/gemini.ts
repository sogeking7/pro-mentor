import type { DiagnosticAnswers } from "@/features/diagnostics/ProfDiagnostics";
import axios from "axios";

export interface GeminiResponse {
  recommendation_title: string;
  recommendation_description: string;
  priority: string;
  icon: string;
}

export const geminiApi = {
  sendPrompt: async function (
    data: DiagnosticAnswers,
  ): Promise<Array<GeminiResponse>> {
    const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

    const prompt = `
You are an expert in professional diagnostics for teachers in Kazakhstan. Based on the user's answers to 6 diagnostic questions, generate culturally appropriate, personalized recommendations in Kazakh language.

Respond with an array of 3‚Äì5 JSON objects. Each object should include:
- "recommendation_title": 3‚Äì6 words, clear and concise
- "recommendation_description": 3‚Äì5 sentences of practical advice
- "priority": one of "–ñ–æ“ì–∞—Ä—ã", "–û—Ä—Ç–∞—à–∞", or "–¢”©–º–µ–Ω"
- "icon": a relevant emoji

Use professional, yet friendly tone. Do NOT include explanations outside of the JSON.

User answers:
${JSON.stringify(data, null, 2)}

Example output:
[
  {
    "recommendation_title": "–û“õ—ã—Ç—É —Å—Ç–∏–ª—ñ–Ω –±–µ–π—ñ–º–¥–µ—É",
    "recommendation_description": "–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –±–µ—Ä–≥–µ–Ω –∂–∞—É–∞–ø—Ç–∞—Ä—ã“£—ã–∑ –æ“õ—É—à—ã–ª–∞—Ä–¥—ã“£ ”ô—Ä—Ç“Ø—Ä–ª—ñ –æ“õ—É —Å—Ç–∏–ª—å–¥–µ—Ä—ñ–Ω–µ –Ω–∞–∑–∞—Ä –∞—É–¥–∞—Ä—É “õ–∞–∂–µ—Ç—Ç—ñ–≥—ñ–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ. –°–∞–±–∞“õ –±–∞—Ä—ã—Å—ã–Ω–¥–∞ –≤–∏–∑—É–∞–ª–¥—ã –∂”ô–Ω–µ –∞—É–¥–∏–æ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä–¥—ã –∫”©–±—ñ—Ä–µ–∫ “õ–æ–ª–¥–∞–Ω—É“ì–∞ —Ç—ã—Ä—ã—Å—ã“£—ã–∑. –ë“±–ª ”ô–¥—ñ—Å –æ“õ—É—à—ã–ª–∞—Ä–¥—ã“£ –±–µ–ª—Å–µ–Ω–¥—ñ–ª—ñ–≥—ñ–Ω –∞—Ä—Ç—Ç—ã—Ä–∞–¥—ã –∂”ô–Ω–µ “Ø–ª–≥–µ—Ä—ñ–º—ñ–Ω –∂–∞“õ—Å–∞—Ä—Ç–∞–¥—ã.",
    "priority": "–ñ–æ“ì–∞—Ä—ã",
    "icon": "üìö"
  },
  ...
]
    `.trim();

    try {
      const { data } = await axios.post(
        endpoint,
        {
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        },
      );

      let txt = data.candidates[0].content.parts[0].text;
      txt = txt.replace(/^```|```$/g, "");
      txt = txt.replace("json", "");
      const obj = JSON.parse(txt) as GeminiResponse[];
      return obj;
    } catch (error) {
      console.error("Error calling Gemini API:", error);
      throw error;
    }
  },
};
