import { useCallback, useEffect, useMemo, useState } from "react";
import { Check } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { geminiApi, type GeminiResponse } from "@/lib/services/gemini";

interface DiagnosticQuestion {
  id: string;
  title: string;
  type: "single" | "multiple";
  options: string[];
}

export interface DiagnosticAnswers {
  [key: string]: string | string[];
}

const DIAGNOSTIC_QUESTIONS: DiagnosticQuestion[] = [
  {
    id: "“ö—ã–∑–º–µ—Ç –µ—Ç—É –±–∞“ì—ã—Ç—ã (–ª–∞—É–∞–∑—ã–º)",
    title: "“ö—ã–∑–º–µ—Ç –µ—Ç—É –±–∞“ì—ã—Ç—ã (–ª–∞—É–∞–∑—ã–º)",
    type: "single",
    options: [
      "–ë–∞—Å—Ç–∞—É—ã—à —Å—ã–Ω—ã–ø –º“±“ì–∞–ª—ñ–º—ñ",
      "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–ê“ì—ã–ª—à—ã–Ω –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–û—Ä—ã—Å —Ç—ñ–ª—ñ –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–¢–∞—Ä–∏—Ö –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–§–∏–∑–∏–∫–∞ –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–•–∏–º–∏—è –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–ë–∏–æ–ª–æ–≥–∏—è –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
      "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø”ô–Ω—ñ –º“±“ì–∞–ª—ñ–º—ñ",
    ],
  },
  {
    id: "–ñ“±–º—ã—Å ”©—Ç—ñ–ª—ñ",
    title: "–ñ“±–º—ã—Å ”©—Ç—ñ–ª—ñ",
    type: "single",
    options: [
      "3 –∞–π –º–µ–Ω 6 –∞–π –∞—Ä–∞–ª—ã“ì—ã",
      "6-12 –∞–π –∞—Ä–∞–ª—ã“ì—ã",
      "1 –∂—ã–ª-3 –∂—ã–ª –∞—Ä–∞–ª—ã“ì—ã",
      "3 –∂—ã–ª - 5 –∂—ã–ª –∞—Ä–∞–ª—ã“ì—ã",
      "5 –∂—ã–ª-8 –∂—ã–ª –∞—Ä–∞–ª—ã“ì—ã",
      "8 –∂—ã–ª-10 –∂—ã–ª –∞—Ä–∞–ª—ã“ì—ã",
      "10 –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º",
    ],
  },
  {
    id: "–ë—ñ–ª—ñ–∫—Ç—ñ–ª—ñ–∫ —Å–∞–Ω–∞—Ç—ã",
    title: "–ë—ñ–ª—ñ–∫—Ç—ñ–ª—ñ–∫ —Å–∞–Ω–∞—Ç—ã",
    type: "single",
    options: [
      "–ü–µ–¥–∞–≥–æ–≥",
      "–ü–µ–¥–∞–≥–æ–≥-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
      "–ü–µ–¥–∞–≥–æ–≥-—Å–∞—Ä–∞–ø—à—ã",
      "–ü–µ–¥–∞–≥–æ–≥-–∑–µ—Ä—Ç—Ç–µ—É—à—ñ",
      "–ü–µ–¥–∞–≥–æ–≥-—à–µ–±–µ—Ä",
    ],
  },
  {
    id: "”®–∑ –ø”ô–Ω—ñ“£—ñ–∑ –±–æ–π—ã–Ω—à–∞ –±—ñ–ª—ñ–º –¥–µ“£–≥–µ–π—ñ“£—ñ–∑–¥—ñ “õ–∞–Ω—à–∞–ª—ã“õ—Ç—ã –∂–æ“ì–∞—Ä—ã –¥–µ–ø –±–∞“ì–∞–ª–∞–π—Å—ã–∑?",
    title:
      "”®–∑ –ø”ô–Ω—ñ“£—ñ–∑ –±–æ–π—ã–Ω—à–∞ –±—ñ–ª—ñ–º –¥–µ“£–≥–µ–π—ñ“£—ñ–∑–¥—ñ “õ–∞–Ω—à–∞–ª—ã“õ—Ç—ã –∂–æ“ì–∞—Ä—ã –¥–µ–ø –±–∞“ì–∞–ª–∞–π—Å—ã–∑?",
    type: "single",
    options: ["”®—Ç–µ –∂–æ“ì–∞—Ä—ã", "–ñ–æ“ì–∞—Ä—ã", "–û—Ä—Ç–∞—à–∞", "–¢”©–º–µ–Ω"],
  },
  {
    id: "–°–∞–±–∞“õ—Ç–∞ “õ–∞–Ω–¥–∞–π –æ“õ—ã—Ç—É ”ô–¥—ñ—Å—Ç–µ—Ä—ñ–Ω –∂–∏—ñ “õ–æ–ª–¥–∞–Ω–∞—Å—ã–∑?",
    title: "–°–∞–±–∞“õ—Ç–∞ “õ–∞–Ω–¥–∞–π –æ“õ—ã—Ç—É ”ô–¥—ñ—Å—Ç–µ—Ä—ñ–Ω –∂–∏—ñ “õ–æ–ª–¥–∞–Ω–∞—Å—ã–∑? ",
    type: "multiple",
    options: [
      "–¢–æ–ø—Ç—ã“õ –∂“±–º—ã—Å",
      "–ñ–µ–∫–µ –∂“±–º—ã—Å",
      "–î–∏—Å–∫—É—Å—Å–∏—è / –ø—ñ–∫—ñ—Ä—Ç–∞–ª–∞—Å",
      "–ñ–æ–±–∞–ª—ã“õ –∂“±–º—ã—Å",
      "–ê–ö–¢ “õ–æ–ª–¥–∞–Ω—É",
    ],
  },
  {
    id: "“ö–∞–∑—ñ—Ä–≥—ñ –∂“±–º—ã—Å—ã“£—ã–∑ —Å—ñ–∑–¥—ñ “õ–∞–Ω—à–∞–ª—ã“õ—Ç—ã —à–∞–±—ã—Ç—Ç–∞–Ω–¥—ã—Ä–∞–¥—ã?",
    title: "“ö–∞–∑—ñ—Ä–≥—ñ –∂“±–º—ã—Å—ã“£—ã–∑ —Å—ñ–∑–¥—ñ “õ–∞–Ω—à–∞–ª—ã“õ—Ç—ã —à–∞–±—ã—Ç—Ç–∞–Ω–¥—ã—Ä–∞–¥—ã?",
    type: "single",
    options: [
      "”®—Ç–µ —à–∞–±—ã—Ç—Ç–∞–Ω–¥—ã—Ä–∞–¥—ã",
      "–ñ–∞–π “ì–∞–Ω–∞ –∂“±–º—ã—Å —Ä–µ—Ç—ñ–Ω–¥–µ “õ–∞–±—ã–ª–¥–∞–π–º—ã–Ω",
      "–®–∞—Ä—à–∞–π–º—ã–Ω",
    ],
  },
  {
    id: "“ö—ã–∑–º–µ—Ç—ñ“£—ñ–∑–¥–µ –∂–∏—ñ –∫–µ–∑–¥–µ—Å–µ—Ç—ñ–Ω –º”ô—Å–µ–ª–µ “õ–∞–Ω–¥–∞–π?",
    title: "“ö—ã–∑–º–µ—Ç—ñ“£—ñ–∑–¥–µ –∂–∏—ñ –∫–µ–∑–¥–µ—Å–µ—Ç—ñ–Ω –º”ô—Å–µ–ª–µ “õ–∞–Ω–¥–∞–π?",
    type: "multiple",
    options: [
      "–ê—Ç–∞-–∞–Ω–∞–ª–∞—Ä–º–µ–Ω –∂“±–º—ã—Å",
      "–ò–Ω–∫–ª—é–∑–∏–≤—Ç—ñ –±—ñ–ª—ñ–º –±–µ—Ä—É",
      "–î–∞—Ä—ã–Ω–¥—ã –±–∞–ª–∞–º–µ–Ω –∂“±–º—ã—Å",
      "“ö“±–∂–∞—Ç—Ç–∞—Ä–º–µ–Ω –∂“±–º—ã—Å",
    ],
  },
];

const ProgressBar = ({
  current,
  total,
}: {
  current: number;
  total: number;
}) => (
  <div className="mb-6">
    <div className="mb-2 flex justify-between text-sm">
      <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
      <span>
        {current} / {total}
      </span>
    </div>
    <div className="h-2 w-full rounded-full bg-gray-200">
      <div
        className="h-2 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 transition-all duration-300"
        style={{ width: `${(current / total) * 100}%` }}
      />
    </div>
  </div>
);

const OptionButton = ({
  option,
  isSelected,
  isMultiple,
  onClick,
}: {
  option: string;
  isSelected: boolean;
  isMultiple: boolean;
  onClick: () => void;
}) => (
  <button
    onClick={onClick}
    className={`w-full rounded-xl border-2 p-4 text-left transition-all duration-200 ${
      isSelected
        ? "border-blue-500 bg-blue-50 text-blue-700"
        : "border-gray-200 hover:border-blue-300 hover:bg-blue-50"
    }`}
  >
    <div className="flex items-center">
      <div
        className={`mr-3 h-4 w-4 flex-shrink-0 border-2 transition-all duration-200 ${
          isMultiple ? "rounded-xs" : "rounded-full"
        } ${isSelected ? "border-blue-500 bg-blue-500" : "border-gray-300"}`}
      >
        {isSelected &&
          (isMultiple ? (
            <Check color="white" size={12} strokeWidth={3} />
          ) : (
            <div className="m-0.5 h-2 w-2 rounded-full bg-white" />
          ))}
      </div>
      {option}
    </div>
  </button>
);

export const ProfDiagnostics = () => {
  const [showResults, setShowResults] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [answers, setAnswers] = useState<DiagnosticAnswers>({});
  const [geminiResponse, setGeminiResponse] =
    useState<Array<GeminiResponse> | null>(null);

  const handleAnswer = useCallback(
    (questionId: string, answer: string, isMultiple = false) => {
      setAnswers((prev) => {
        if (isMultiple) {
          const current = (prev[questionId] as string[]) || [];
          const updated = current.includes(answer)
            ? current.filter((a) => a !== answer)
            : [...current, answer];
          return { ...prev, [questionId]: updated };
        }
        return { ...prev, [questionId]: answer };
      });
    },
    [],
  );

  const nextQuestion = useCallback(() => {
    if (currentIndex === 0) {
      setCurrentIndex(1);
    } else if (currentIndex >= DIAGNOSTIC_QUESTIONS.length) {
      setShowResults(true);
    } else {
      setCurrentIndex(currentIndex + 1);
    }
  }, [currentIndex]);

  const prevQuestion = useCallback(() => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  }, [currentIndex]);

  const resetDiagnostic = useCallback(() => {
    setCurrentIndex(0);
    setAnswers({});
    setShowResults(false);
    setGeminiResponse(null);
  }, []);

  const currentQuestion = useMemo(() => {
    if (currentIndex === 0) return null;
    return DIAGNOSTIC_QUESTIONS[currentIndex - 1] || null;
  }, [currentIndex]);

  const hasAnswer = useMemo(() => {
    if (!currentQuestion) return true;
    const answer = answers[currentQuestion.id];
    return currentQuestion.type === "multiple"
      ? Array.isArray(answer) && answer.length > 0
      : Boolean(answer);
  }, [currentQuestion, answers]);

  const { mutateAsync: sendPrompt, isPending } = useMutation({
    mutationFn: async (data: DiagnosticAnswers) => geminiApi.sendPrompt(data),
    onSuccess: (data) => {
      setGeminiResponse(data);
    },
    onError: (error) => {
      setGeminiResponse(null);
    },
  });
  useEffect(() => {
    if (showResults) {
      const sendResults = async () => {
        await sendPrompt(answers);
      };

      sendResults();
    }
  }, [showResults, answers]);

  if (showResults) {
    if (isPending) {
      return (
        <div className="my-6 flex h-[50vh] flex-col items-center justify-center gap-2 text-center">
          <div className="h-12 w-12 animate-spin rounded-full border-5 border-blue-200 border-t-transparent bg-gradient-to-r from-blue-600 to-purple-600">
            <div className="size-[38px] rounded-full bg-white"></div>
          </div>
          <p className="text-gray-500">–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...</p>
        </div>
      );
    }
    return (
      <div className="space-y-6">
        <div className="mb-8 text-center">
          <div className="mb-4 text-6xl">üéâ</div>
          <h2 className="mb-4 text-3xl font-bold text-gray-800">
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ
          </h2>
          <p className="text-gray-600">
            –°—ñ–∑–¥—ñ“£ –∂–∞—É–∞–ø—Ç–∞—Ä—ã“£—ã–∑ –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ “õ“±—Ä–∞—Å—Ç—ã—Ä—ã–ª“ì–∞–Ω –∂–µ–∫–µ –¥–∞–º—É –∂–æ—Å–ø–∞—Ä—ã
          </p>
        </div>

        {geminiResponse && (
          <>
            <div className="mb-8 grid grid-cols-1 gap-8 lg:grid-cols-1">
              {geminiResponse.map((rec, index) => (
                <div
                  key={index}
                  className="rounded-2xl border border-gray-200 bg-white p-6 shadow-md"
                >
                  <div className="mb-2 text-3xl">{rec.icon}</div>
                  <h3 className="mb-2 text-xl font-semibold text-gray-800">
                    {rec.recommendation_title}
                  </h3>
                  <p className="mb-3 text-gray-700">
                    {rec.recommendation_description}
                  </p>
                  <span
                    className={`inline-block rounded-full px-3 py-1 text-sm font-medium ${
                      rec.priority === "–ñ–æ“ì–∞—Ä—ã"
                        ? "bg-red-100 text-red-800"
                        : rec.priority === "–û—Ä—Ç–∞—à–∞"
                          ? "bg-yellow-100 text-yellow-800"
                          : "bg-green-100 text-green-800"
                    }`}
                  >
                    –ë–∞—Å—ã–º–¥—ã“õ: {rec.priority}
                  </span>
                </div>
              ))}
            </div>
          </>
        )}
        <div className="text-center">
          <button
            onClick={resetDiagnostic}
            className="transform rounded-full bg-gradient-to-r from-blue-600 to-purple-600 px-8 py-3 font-semibold text-white transition-all duration-300 hover:-translate-y-1 hover:shadow-lg"
          >
            “ö–∞–π—Ç–∞–¥–∞–Ω ”©—Ç—É
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {currentIndex === 0 ? (
        <div className="mb-8 rounded-2xl bg-gradient-to-r from-blue-50 to-purple-50 p-8 text-center">
          <div className="mb-4 text-4xl">üî¨</div>
          <h3 className="mb-4 text-2xl font-bold">
            AI-–Ω–µ–≥—ñ–∑–¥–µ–ª–≥–µ–Ω –∫”ô—Å—ñ–±–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          </h3>
          <p className="mb-6 text-gray-600">
            –ñ–µ–∫–µ –¥–∞–º—ã—Ç—É –∂–æ—Å–ø–∞—Ä—ã–Ω –∞–ª—É “Ø—à—ñ–Ω 6 —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑. –ë–∞—Ä–ª—ã“õ
            –¥–µ—Ä–µ–∫—Ç–µ—Ä “õ“±–ø–∏—è —Å–∞“õ—Ç–∞–ª–∞–¥—ã.
          </p>
          <button
            onClick={nextQuestion}
            className="transform rounded-full bg-gradient-to-r from-blue-600 to-purple-600 px-8 py-3 font-semibold text-white transition-all duration-300 hover:-translate-y-1 hover:shadow-lg"
          >
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞–Ω—ã –±–∞—Å—Ç–∞—É
          </button>
        </div>
      ) : (
        <div>
          <ProgressBar
            current={currentIndex}
            total={DIAGNOSTIC_QUESTIONS.length}
          />

          {currentQuestion && (
            <div className="rounded-2xl border border-gray-200 bg-white p-6">
              <h3 className="text-xl font-bold text-gray-800">
                {currentQuestion.title}
              </h3>
              <p className="mb-6 text-gray-600">
                {currentQuestion.type === "single"
                  ? "–ë—ñ—Ä –∂–∞—É–∞–ø—Ç—ã —Å“±—Ä–∞“õ"
                  : "–ö”©–ø –∂–∞—É–∞–ø—Ç—ã —Å“±—Ä–∞“õ"}
              </p>

              <div className="mb-6 space-y-3">
                {currentQuestion.options.map((option, index) => {
                  const isMultiple = currentQuestion.type === "multiple";
                  const currentAnswers = answers[currentQuestion.id];
                  const isSelected = isMultiple
                    ? Array.isArray(currentAnswers) &&
                      currentAnswers.includes(option)
                    : currentAnswers === option;

                  return (
                    <OptionButton
                      key={index}
                      option={option}
                      isSelected={isSelected}
                      isMultiple={isMultiple}
                      onClick={() =>
                        handleAnswer(currentQuestion.id, option, isMultiple)
                      }
                    />
                  );
                })}
              </div>

              <div className="flex justify-between">
                <button
                  onClick={prevQuestion}
                  className="rounded-full border-2 border-gray-300 px-6 py-3 font-semibold text-gray-700 transition-all duration-300 hover:bg-gray-50"
                >
                  –ê—Ä—Ç“õ–∞
                </button>

                <button
                  onClick={nextQuestion}
                  disabled={!hasAnswer}
                  className="transform rounded-full bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-3 font-semibold text-white transition-all duration-300 hover:-translate-y-1 hover:shadow-lg disabled:transform-none disabled:cursor-not-allowed disabled:opacity-50"
                >
                  {currentIndex >= DIAGNOSTIC_QUESTIONS.length
                    ? "–ê—è“õ—Ç–∞—É"
                    : "–ö–µ–ª–µ—Å—ñ"}
                </button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
